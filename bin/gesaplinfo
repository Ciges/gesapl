#!/bin/bash

# Script de generación de informes de uso de GesApl v1.00
# Genera un informe con 
# - Relación de programas monitorizados (sus nombres)
# - Última hora de cada uno de esos programas. Si funcionan y el momento de su último control.
# - Relación de los últimos 20 comandos ejecutados en GesApl y de los parámetros que se le envíaron así como de la fecha y hora de su ejecución

# CONFIGURACIÓN
CONFIG_FILE="/usr/local/etc/gesapl/gesapl.conf"
if ! [[ -r ${CONFIG_FILE} ]];  then
    printf "ERROR: %s!\n\n" "Fichero de configuración ${CONFIG_FILE} no encontrado o imposible de leer"
    help
    exit 1
fi;
source ${CONFIG_FILE}

GESAPLINFO_VERSION="1.00"

# Archivo en el que se grabará el informe de salida
fichero_salida="${tmp_dir}/gesaplinfo_$(date +%Y%m%d-%H%M)"
[[ -e ${fichero_salida} ]] && rm ${fichero_salida}


# FUNCIONES

# Muestra la ayuda del script
function help {
    printf "%s\n"  "GesApl Informes v${GESAPLINFO_VERSION} - Informe de uso de GesApl"

    printf "\nUso: gesaplinfo [ email ]

    Este script genera un informe de uso de GesApl y si se indica un email lo envía por correo.

    El informe consta de
    - Una relación de servicios monitorizados
    - Estado de cada uno de estos servicios. Fecha y hora del último control realizado
    - Últimos 20 comandos ejecutados en GesApl, con sus parámetros, fecha y hora de ejecución y usuario que lo lanzó
    - Configuración de los servicios registrada


"
}


# INICIO DEL CODIGO



# Registramos el comando
log_command "gesaplinfo $@"

# Parseamos los argumentos
if [[ $# -gt 1 ]]; then
    printf "ERROR %s\n\n" "Número de parámetros incorrecto"
    help
    exit 1
elif [[ $# -eq 1 ]]; then
    if [[ $1 == "-a" ]]; then
        help
        exit 0
    else
        email=$1

        # ¿La dirección de correo es válida?
        if ! [[ "${email}" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$ ]]; then
            printf "ERROR: %s\n\n" "La dirección de correo ${email} no es válida"
            exit 1
        fi
    fi;
    shift
fi;

# Colores
GREEN='\e[1;32m'
RED='\e[1;31m'
NC='\e[0m' # No Color

now="$(date +'%b %e %T')"

printf "GesApl Informes v${GESAPLINFO_VERSION}

El informe mostrada se grabará en ${fichero_salida}
Si indica una dirección de email el informe se enviará también por correo electrónico.

--------------------------------------------------------------\n\n"

printf "%s\n" "Informe de uso de GesApl: ${now}" | tee -a "${fichero_salida}"

printf "\n%s\n\n" "--------------------------------------------------------------" | tee -a "${fichero_salida}"

list_active_services="$(active_services)"
printf "Servicios monitorizados: $list_active_services\n" | tee -a "${fichero_salida}"

printf "\nEstado actual del demonio: " | tee -a "${fichero_salida}"
if gesapld_started; then
    printf "${GREEN}Activo${NC}"
    printf "Activo" >> "${fichero_salida}"
else
    printf "${RED}Inactivo${NC}" | tee -a "${fichero_salida}"
    printf "Inactivo" >> "${fichero_salida}"
fi;
printf "\n" | tee -a "${fichero_salida}"

printf "\nEstado de cada servicio: \n" | tee -a "${fichero_salida}"
for s in $(configured_services); do
    printf "\n\t- %s: " ${s} | tee -a "${fichero_salida}"

    service_status_message="$(monitor ${s})"
    if [[ $? -eq 0 ]]; then 
        printf "${GREEN}Activo${NC}\n"
        printf "Activo\n" >> "${fichero_salida}"
    else
        printf "${RED}Inactivo${NC}\n"
        printf "Inactivo\n" >> "${fichero_salida}"
    fi;

    if ! echo "$list_active_services" | grep -qP "(^|\s+)${s}(\$|\s+)"; then
        printf "\t  %s\n" "Este servicio no está siendo actualmente monitorizado" | tee -a "${fichero_salida}"
    fi;
    last_control="$(grep "$(printf "${log_monitor_service_format}" ${s})" "${log_file}"|tail -n1)"
    printf "\t  Último control realizado: " | tee -a "${fichero_salida}"
    if [[ -n ${last_control} ]]; then
        printf "%s\n" "${last_control}" | tee -a "${fichero_salida}"
    else
        printf "%s\n" "No hay registros" | tee -a "${fichero_salida}"
    fi;

    [[ -n ${service_status_message} ]] && printf "\t  Error obtenido: %s\n" "${service_status_message}" | tee -a "${fichero_salida}"


done

printf "\n%s\n\n" "--------------------------------------------------------------" | tee -a "${fichero_salida}"

printf "Últimos 20 comandos ejecutados en GesApl (y usuario que los ejecutó)\n\n" | tee -a "${fichero_salida}"
if [[ -r ${log_commands_file} ]]; then
    tail -n20 "${log_commands_file}"|tac|while read l; do
        printf "\t  %s\n" "${l}" | tee -a "${fichero_salida}"
    done
else
    printf "%s\n" "No hay registros" | tee -a "${fichero_salida}"
fi;


printf "\n%s\n\n" "--------------------------------------------------------------" | tee -a "${fichero_salida}"

printf "Servicios configurados: $(configured_services)\n" | tee -a "${fichero_salida}"

printf "Configuración registrada:\n" | tee -a "${fichero_salida}"
for s in $(configured_services); do
    config="$(service_configuration ${s})"
    printf "\t- %s\n" "${config}" | tee -a "${fichero_salida}"
done;

printf "\n"
if [[ -n ${email} ]]; then
    if which mail; then
        mail -s "Informe de uso de GesApl: ${now} (enviado desde $(hostname))" ${email} < ${fichero_salida}
        printf "\nInforme enviado a la dirección de correo %s\n" ${email}
    else
        printf "\nERROR: no se ha encontrado el comando mail, correo no enviado\n"
    fi;
fi;
