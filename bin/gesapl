#!/bin/bash

# Script de monitorización de servicios de GesApl
# Permite listar y configurar los servicios a monitorizar

# CONFIGURACIÓN
CONFIG_FILE="/etc/gesapl/gesapl.conf"
GESAPL_VERSION="1.00"

# FUNCIONES
function help {
    printf "%s\n"  "GesApl v${GESAPL_VERSION} - Aplicación de monitorización de servicios"

    printf "\nUso: gesapl orden parámetros

Siendo orden una de las siguientes: --monitorizar_servicios (o -ms), --registrar_servicio (o -rs), --borrar_servicio (o -bs), --listar_servicios (o -ls), --ayuda (o -a)

    -ms | --monitorizar_servicios :  Monitoriza los servicios configurados

    -rs | --registrar_servicio nombre script_de_arranque ruta_pid_file service_executable :  Registra un servicio e inicia su monitorización

        El nombre de servicio es arbitrario, es el nombre con el que gesapl lo va a tratar
        El script de arranque es el nombre del script de arranque/parada en /etc/init.d
        El último parámetro es la ruta del binario con el que se le ve en la lista de procesos del sistema

        Si el servicio ya ha sido configurado y no se desea cambiarla sólo se necesita el nombre

    -bs | --borrar_servicio nombre :  Borra el servicio indicado

    -ls | --listar_servicios :  Lista los servicios monitorizados y los parámetros registrados para cada uno

    -a | --ayuda :  Muestra este mensaje explicativo

Ejemplos: 

Monitorizar Apache y MySQL
    gesapl --registrar_servicio apache apache2 /var/run/apache2/apache2.pid /usr/sbin/apache2
    gesapl --registrar_servicio mysql mysql /run/mysqld/mysql.pid /usr/sbin/mysqld

Dejar de monitorizar MySQL
    gesapl --borrar_servicio mysql

"
}


# INICIO DEL CODIGO
if ! [[ -r ${CONFIG_FILE} ]];  then
    printf "ERROR: %s!\n\n" "Fichero de configuración ${CONFIG_FILE} no encontrado o imposible de leer"
    help
    exit 1
fi;

source ${CONFIG_FILE}

# Valores por defecto
comando=""

# Parseamos los argumentos
if [[ $# -eq 0 ]]; then
    # Registramos el comando
    log_command "gesapl"

    printf "ERROR %s\n\n" "Número de parámetros incorrecto"
    help
    exit 1
fi;

case $1 in
    -ms|--monitorizar_servicio)
        # Registramos el comando
        log_command "gesapl $@"

        comando="ms"
        shift        

        if [[ $# -ne 0  ]]; then
            printf "ERROR %s\n\n" "Número de parámetros incorrecto"
            help
            exit 1
        fi
        ;;
     -rs|--registrar_servicio)
        # Registramos el comando
        log_command "gesapl $@"

        comando="rs"
        shift
        nombre=$1
        shift


        if [[ $# -eq 0 ]]; then
            # Si el servicio está configurado y sólo tenemos el nombre cargamos su configuración
            if [[ -r ${services_data}/${nombre} ]]; then
                service_info="$(cat ${services_data}/${nombre})"
                service_script="$(echo ${service_info}|cut -f1 -d',')"
                pid_file="$(echo ${service_info}|cut -f2 -d',')"
                service_executable="$(echo ${service_info}|cut -f3 -d',')"
            # Al borrar un servicio no borramos su configuración, la renombramos
            # De esta forma podemos volver a registrarlo indicando sólo su nombre
            elif [[ -r ${services_data}/${nombre}.deleted ]]; then
                service_info="$(cat ${services_data}/${nombre}.deleted)"
                service_script="$(echo ${service_info}|cut -f1 -d',')"
                pid_file="$(echo ${service_info}|cut -f2 -d',')"
                service_executable="$(echo ${service_info}|cut -f3 -d',')"
            fi;
        else
            service_script=$1
            shift
            pid_file=$1
            shift
            service_executable=$1
            shift
        fi;

        if [[ -z ${nombre} || -z ${service_script} || -z ${pid_file} || -z ${service_executable} ]]; then
            printf "ERROR %s\n\n" "Número de parámetros incorrecto"
            help
            exit 1
        else
            # Si el servicio está configurado y detenida su monitorización la reiniciamos
            [[ -e ${services_data}/${nombre}.stop ]] && rm ${services_data}/${nombre}.stop
        fi
        ;;
    -bs|--borrar_servicio)
        # Registramos el comando
        log_command "gesapl $@"

        comando="bs"
        shift
        nombre=$1
        shift

        if [[ -z ${nombre} || $# -ne 0  ]]; then
            printf "ERROR %s\n\n" "Número de parámetros incorrecto"
            help
            exit 1
        fi
        ;;
    -ls|--listar_servicios)
        # Registramos el comando
        log_command "gesapl $@"

        comando="ls"
        shift
        ;;
    -a|--ayuda)
        # Registramos el comando
        log_command "gesapl $@"

        help
        exit 0
        ;;
    *)
        # Registramos el comando
        log_command "gesapl $@ (Orden no reconocida)"

        printf "ERROR %s\n\n" "Orden no reconocida"
        help
        exit 1
        ;;
esac;


case ${comando} in
    ms)
        error_message=""  # The error message is show at the end 

        printf "%s\n"  "GesApl v${GESAPL_VERSION} - Aplicación de monitorización de servicios"
        services_info_files="$(services_configs)"


        if [[ -n ${services_info_files} ]]; then
            printf "\nMonitorización de servicios:\n"
            for service in $(active_services); do

                status_message="$(monitor "${service}")"
                if [[ $? -eq 0 ]]; then
                    status="OK"
                else
                    status="KO"
                fi;

                now="$(date +'%b %e %T')"
                if [[ -z ${status_message} ]]; then
                    printf "\t- %s : %s (%s)\n" "${service}" "${status}" "${now}"
                    if [[ -w ${log_file} ]]; then
                        log_message="$(printf "${log_monitor_service_format}" ${service}) ${status}"
                        log "${log_message}"
                    else
                        error_message="WARNING: No ha sido posible escribir en el log ${log_file} ¿problema de permisos?"
                    fi;

                    # Si el servicio está caído mandar un email a los admins
                    # Con este flag controlamos que sólo enviemos un email :-)
                    mail_flag="${tmp_dir}/${service}.mailsent"
                    if [[ ${status} == "KO" ]]; then
                        if ! [[ -e ${mail_flag} ]]; then
                            now="$(date +'%b %e %T')"
                            for email in `echo $admin_emails|tr ',' ' '`; do
                                printf "%s El servicio %s está caído (servidor %s)\n" "${now}" ${service} "$(hostname)"|mail -s "Servicio ${service} KO en el servidor $(hostname)" ${email}
                            done;
                            touch ${mail_flag}
                        fi;
                    else
                        [[ -e ${mail_flag} ]] && rm ${mail_flag}
                    fi;
                else
                    printf "\t- %s : %s (%s!) (%s)\n" "${service}" "${status}" "${status_message}" "${now}"
                    if [[ -w ${log_file} ]]; then
                        status="${status} - ${status_message}"
                        log_message="$(printf "${log_monitor_service_format}" ${service}) ${status})"
                        log "${log_message}"
                    else
                        error_message="WARNING: No ha sido posible escribir en el log ${log_file} ¿problema de permisos?"
                    fi;

                    # Si el servicio está caído mandar un email a los admins
                    # Con este flag controlamos que sólo enviemos un email :-)
                    mail_flag="${tmp_dir}/${service}.mailsent"
                    if [[ ${status} == "KO" ]]; then
                        if ! [[ -e ${mail_flag} ]]; then
                            now="$(date +'%b %e %T')"
                            for email in `echo $admin_emails|tr ',' ' '`; do
                                printf "%s El servicio %s está caído (servidor %s, mensaje de estado \"%s\")\n" "${now}" ${service} "${status_message}" "$(hostname)"|mail -s "Servicio ${service} KO en el servidor $(hostname)" ${email}
                            done;
                            touch ${mail_flag}
                        fi;
                    else
                        [[ -e ${mail_flag} ]] && rm ${mail_flag}
                    fi;
                 fi;
            done;
        
        else
            mensaje="Monitorización no realizada:  Ningún servicio está configurado en gesapl"
            printf "$mensaje"
            log "$mensaje"
        fi;

        printf "\n"
        if [[ -n  ${error_message} ]]; then
            printf "%s\n" "${error_message}"
        fi;
        ;;

    rs)
        if ! [[ -d ${services_data} ]]; then
            mkdir -p "${services_data}"
            rc=$?
            if [[ ${rc} -ne 0 ]]; then
                printf "ERROR: %s\n\n" "Error al crear el directorio ${services_data}"
                exit 1
            fi;
        fi;

        #if [[ -f ${services_data}/${nombre} ]]; then
        #    printf "ERROR: %s\n\n" "El servicio ${nombre} ya ha sido registrado en gesappl"
        #    exit 1
        #fi;

        echo "${service_script},${pid_file},${service_executable}" > "${services_data}/${nombre}"
        rc=$?
        if [[ ${rc} -ne 0 ]]; then
            printf "ERROR: %s\n\n" "Error al añadir el servicio ${nombre}"
            exit 1
        fi;

        mensaje="Añadida la monitorización del servicio ${nombre} (script de arranque=/etc/init.d/${service_script}, fichero pid=${pid_file}, service_executable=${service_executable})"
        printf "${mensaje}\n\n"
        log "${mensaje}"
        ;;

    bs)
        if ! [[ -f ${services_data}/${nombre} ]]; then
            printf "ERROR: %s\n\n" "El servicio ${nombre} no está siendo monitorizado por gesappl"
            exit 1
        fi;
        mv -f "${services_data}/${nombre}" "${services_data}/${nombre}.deleted"
        rc=$?
        if [[ ${rc} -ne 0 ]]; then
            printf "ERROR: %s\n\n" "Error al eliminar el servicio ${nombre}"
            exit 1
        fi;

        mensaje="Detenida la monitorización del servicio ${nombre}"
        printf "${mensaje}\n\n"
        log "${mensaje}"
        ;;

    ls)
        printf "%s\n"  "GesApl v${GESAPL_VERSION} - Aplicación de monitorización de servicios"
        services_info_files="$(services_configs)"

        if [[ -n ${services_info_files} ]]; then
            printf "\nServicios monitorizados: $(active_services)\n\n"

            printf "Configuración de los servicios:\n"
            for f in ${services_info_files}; do
                config="$(service_configuration ${f##*/})"
                printf "\t- %s\n" "${config}"
            done;
        else
            printf "Ningún servicio está siendo monitorizado por gesapl"
        fi;
        ;;

esac
