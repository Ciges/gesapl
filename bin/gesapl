#!/bin/bash

# CONFIGURACIÓN
CONFIG_FILE="/home/theangryjose/Software/gesapl/etc/gesapl/gesapl.conf"
GESAPL_VERSION="1.00"

# FUNCIONES
function help {
    printf "%s\n"  "GesApl v${GESAPL_VERSION} - Aplicación de monitorización de servicios"

    printf "\nUso: gesapl orden parámetros

Siendo orden una de las siguientes: --registrar_servicio (o -rs), --borrar_servicio (o -bs), --ayuda (o -a)

    -ms | --monitorizar_servicios :  Monitoriza los servicios configurados

    -rs | --registrar_servicio nombre script_de_arranque ruta_pid_file service_executable :  Registra un servicio e inicia su monitorización

        El nombre de servicio es arbitrario, es el nombre con el que gesapl lo va a tratar
        El script de arranque es el nombre del script de arranque/parada en /etc/init.d
        El service_executable es el nombre del service_executable con el que se le ve en el sistema

    -bs | --borrar_servicio nombre :  Borra el servicio indicado

    -ls | --listar_servicios :  Lista los servicios monitorizados y los parámetros registrados para cada uno

    -a | --ayuda :  Muestra este mensaje explicativo

Ejemplos: 

Monitorizar Apache y MySQL
    gesapl --registrar_servicio apache apache2 /var/run/apache2/apache2.pid /usr/sbin/apache2
    gesapl --registrar_servicio mysql mysql /run/mysqld/mysql.pid /usr/sbin/mysqld

Dejar de monitorizar MySQL
    gesapl --borrar_servicio mysql

"
}

# Graba el mensaje pasado como parámetro en en log, precedido de la fecha y hora
function log {
    now="$(date +'%b %e %T')"
    printf "%s %s\n" "${now}" "$1" >> ${log_file}
}

# Monitoriza el servicio indicado
# Devuelve un valor de retorno 0 si está presente, 1 en caso contrario
# Por la salida estandar devuelve un mensaje de error si lo hubiera
function monitor {
    local service
    local service_info
    local service_pid
    local service_script
    local pid_file
    local service_executable
    local status
    local status_message

    service="${1}"
    if ! [ -f "${services_data}/${service}" ]; then
        printf "ERROR: %s\n\n" "El servicio ${nombre} no está siendo monitorizado por gesappl"
        exit 1
    fi;

    # Status KO por defecto
    status=1
    status_message=""

    service_info="$(cat ${services_data}/${service})"
    service_script="$(echo ${service_info}|cut -f1 -d',')"
    pid_file="$(echo ${service_info}|cut -f2 -d',')"
    service_executable="$(echo ${service_info}|cut -f3 -d',')"

    # Verificamos el pid indicado en el fichero PID y si corresponde a proceso en ejecución del servicio
    if [[ -r "${pid_file}" ]]; then
        local service_pid=`cat ${pid_file}`
    
        # Corresponde el PID a un proceso del sistema?
        if ps -hq ${service_pid} > /dev/null; then
            # El PID corresponde al ejecutable del servicio?
            if [[ "$(ps -hq ${service_pid} -o cmd|awk '{ print $1 }')" == "${service_executable}" ]]; then
                status=0    # OK
            else
                status_message="El proceso con PID ${service_pid} existe pero no corresponde al servicio ${service_executable}"
            fi;
        else
            status_message="No hay ningún proceso en el sistema con PID ${service_pid}"
        fi;
    else    
        if ps -e -o cmd|awk '{ print $1 }'|grep -q ${service_executable}; then
            status_message="El servicio está arrancado pero el fichero PID ${pid_file} no existe o no se puede leer"
        fi;
    fi;

    # Si el fichero PID no existe, o no es coherente buscamos procesos en ejecución del servicio
    if [[ ${status} -ne 0 ]]; then
        ps -e -o cmd|awk '{ print $1 }'|grep -q ${service_executable}
        status=$?
    fi;

    [[ -n "${status_message}" ]] && printf "%s\n" "${status_message}"

    return ${status}
}


# INICIO
if ! [ -r ${CONFIG_FILE} ];  then
    printf "ERROR: %s!\n\n" "Fichero de configuración ${CONFIG_FILE} no encontrado o imposible de leer"
    help
    exit 1
fi;

source ${CONFIG_FILE}

# Valores por defecto
comando=""

# Parseamos los argumentos
if [[ $# -eq 0 ]]; then
    printf "ERROR %s\n\n" "Número de parámetros incorrecto"
    help
    exit 1
fi;

case $1 in
    -ms|--monitorizar_servicio)
        comando="ms"
        shift        

        if [ $# -ne 0  ]; then
            printf "ERROR %s\n\n" "Número de parámetros incorrecto"
            help
            exit 1
        fi
        ;;
     -rs|--registrar_servicio)
        comando="rs"
        shift
        nombre=$1
        shift
        service_script=$1
        shift
        pid_file=$1
        shift
        service_executable=$1
        shift

        if [ -z "${nombre}" -o -z "${service_script}" -o -z "${pid_file}" -o -z "${service_executable}" ]; then
            printf "ERROR %s\n\n" "Número de parámetros incorrecto"
            help
            exit 1
        fi
        ;;
    -bs|--borrar_servicio)
        comando="bs"
        shift
        nombre=$1
        shift

        if [ -z "${nombre}" -o $# -ne 0  ]; then
            printf "ERROR %s\n\n" "Número de parámetros incorrecto"
            help
            exit 1
        fi
        ;;
    -ls|--listar_servicios)
        comando="ls"
        shift
        ;;
    -a|--ayuda)
        help
        ;;
    *)
        printf "ERROR %s\n\n" "Orden no reconocida"
        help
        exit 1
        ;;
esac;

case ${comando} in
    ms)
        printf "%s\n"  "GesApl v${GESAPL_VERSION} - Aplicación de monitorización de servicios"
        services_info_files="$(find "${services_data}" -type f|grep -v '_stopped$'|sort)"

        if [[ -n "${services_info_files}" ]]; then
            printf "\nMonitorización de servicios:\n"
            for f in ${services_info_files}; do
                service=${f##*/}

                status_message="$(monitor "${service}")"
                if [[ $? -eq 0 ]]; then
                    status="OK"
                else
                    status="KO"
                fi;

                now="$(date +'%b %e %T')"
                if [[ -z "${status_message}" ]]; then
                    printf "\t- %s : %s (%s)\n" "${service}" "${status}" "${now}"
                    log "Monitorización del servicio ${service}: ${status}"

                    # Si el servicio está caído mandar un email a los admins
                    if [[ "${status}" == "KO" ]]; then
                        now="$(date +'%b %e %T')"
                        for email in `echo $admin_emails|tr ',' ' '`; do
                            printf "%s El servicio %s está caído (servidor %s)\n" "${now}" ${service} "$(hostname)"|mail -s "Servicio ${service} KO en el servidor $(hostname)" ${email}
                        done;
                    fi;
                else
                    printf "\t- %s : %s (%s!) (%s)\n" "${service}" "${status}" "${status_message}" "${now}"
                    log "Monitorización del servicio ${service}: ${status} - ${status_message}"

                    # Si el servicio está caído mandar un email a los admins
                    if [[ "${status}" == "KO" ]]; then
                        now="$(date +'%b %e %T')"
                        for email in `echo $admin_emails|tr ',' ' '`; do
                            printf "%s El servicio %s está caído (servidor %s, mensaje de estado \"%s\")\n" "${now}" ${service} "${status_message}" "$(hostname)"|mail -s "Servicio ${service} KO en el servidor $(hostname)" ${email}
                        done;
                    fi;
                 fi;
            done;
        else
            mensaje="Monitorización no realizada:  Ningún servicio está configurado en gesapl"
            printf "$mensaje"
            log "$mensaje"
        fi;
        ;;

    rs)
        if ! [[ -d "${services_data}" ]]; then
            mkdir -p "${services_data}"
            rc=$?
            if [[ ${rc} -ne 0 ]]; then
                printf "ERROR: %s\n\n" "Error al crear el directorio ${services_data}"
                exit 1
            fi;
        fi;

        if [ -f "${services_data}/${nombre}" ]; then
            printf "ERROR: %s\n\n" "El servicio ${nombre} ya ha sido registrado en gesappl"
            exit 1
        fi;

        echo "${service_script},${pid_file},${service_executable}" > "${services_data}/${nombre}"
        rc=$?
        if [[ ${rc} -ne 0 ]]; then
            printf "ERROR: %s\n\n" "Error al añadir el servicio ${nombre}"
            exit 1
        fi;

        mensaje="Añadida la monitorización del servicio ${nombre} (script de arranque=/etc/init.d/${service_script}, fichero pid=${pid_file}, service_executable=${service_executable})\n"
        printf "${mensaje}\n\n"
        log "${mensaje}"
        ;;
    bs)
        if ! [ -f "${services_data}/${nombre}" ]; then
            printf "ERROR: %s\n\n" "El servicio ${nombre} no está siendo monitorizado por gesappl"
            exit 1
        fi;
        mv -f "${services_data}/${nombre}" "${services_data}/${nombre}_stopped"
        rc=$?
        if [[ ${rc} -ne 0 ]]; then
            printf "ERROR: %s\n\n" "Error al eliminar el servicio ${nombre}"
            exit 1
        fi;

        mensaje="Detenida la monitorización del servicio ${nombre}"
        printf "${mensaje}\n\n"
        log "${mensaje}"
        ;;
    ls)
        printf "%s\n"  "GesApl v${GESAPL_VERSION} - Aplicación de monitorización de servicios"
        services_info_files="$(find "${services_data}" -type f|grep -v '_stopped$'|sort)"

        if [[ -n "${services_info_files}" ]]; then
            printf "\nServicios monitorizados:\n"
            for f in ${services_info_files}; do
                service_info="$(cat ${f})"
                service_script="$(echo ${service_info}|cut -f1 -d',')"
                pid_file="$(echo ${service_info}|cut -f2 -d',')"
                service_executable="$(echo ${service_info}|cut -f3 -d',')"
                printf "\t- %s :  script de arranque=/etc/init.d/%s, fichero pid=%s, service_executable=%s\n" ${f##*/} ${service_script} ${pid_file} ${service_executable}
            done;
        else
            printf "Ningún servicio está siendo monitorizado por gesapl"
        fi;
        ;;

esac
